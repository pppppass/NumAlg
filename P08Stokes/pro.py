import numpy


def calc_pro_bil_u(size, u):
    n = size
    p_u = numpy.zeros((n-1, n))
    p_u[1::2, 1:-1:2] = u[:, :-1] * (3.0/4.0) + u[:, 1:] / 4.0
    p_u[1::2, 2::2] = u[:, :-1] / 4.0 + u[:, 1:] * (3.0/4.0)
    p_u[1::2, 0] = u[:, 0]
    p_u[1::2, -1] = u[:, -1]
    p_u[0:-1:2, :] += p_u[1::2, :] / 2.0
    p_u[2::2, :] += p_u[1::2, :] / 2.0
    return p_u


def calc_pro_bil_v(size, v):
    n = size
    p_v = numpy.zeros((n, n-1))
    p_v[1:-1:2, 1::2] = v[:-1, :] * (3.0/4.0) + v[1:, :] / 4.0
    p_v[2::2, 1::2] = v[:-1, :] / 4.0 + v[1:, :] * (3.0/4.0)
    p_v[0, 1::2] = v[0, :]
    p_v[-1, 1::2] = v[-1, :]
    p_v[:, 0:-1:2] += p_v[:, 1::2] / 2.0
    p_v[:, 2::2] += p_v[:, 1::2] / 2.0
    return p_v


def calc_pro_bil_p(size, p):
    n = size
    p_p = numpy.zeros((n, n))
    p_p[1:-1:2, 1:-1:2] = p[:-1, :-1] * (9.0/16.0) + p[:-1, 1:] * (3.0/16.0) + p[1:, :-1] * (3.0/16.0) + p[1:, 1:] * (1.0/16.0)
    p_p[1:-1:2, 2::2] = p[:-1, :-1] * (3.0/16.0) + p[:-1, 1:] * (9.0/16.0) + p[1:, :-1] * (1.0/16.0) + p[1:, 1:] * (3.0/16.0)
    p_p[2::2, 1:-1:2] = p[:-1, :-1] * (3.0/16.0) + p[:-1, 1:] * (1.0/16.0) + p[1:, :-1] * (9.0/16.0) + p[1:, 1:] * (3.0/16.0)
    p_p[2::2, 2::2] = p[:-1, :-1] * (1.0/16.0) + p[:-1, 1:] * (3.0/16.0) + p[1:, :-1] * (3.0/16.0) + p[1:, 1:] * (9.0/16.0)
    p_p[0, 1:-1:2] = p[0, :-1] * (3.0/4.0) + p[0, 1:] * (1.0/4.0)
    p_p[0, 2::2] = p[0, :-1] * (1.0/4.0) + p[0, 1:] * (3.0/4.0)
    p_p[-1, 1:-1:2] = p[-1, :-1] * (3.0/4.0) + p[-1, 1:] * (1.0/4.0)
    p_p[-1, 2::2] = p[-1, :-1] * (1.0/4.0) + p[-1, 1:] * (3.0/4.0)
    p_p[1:-1:2, 0] = p[:-1, 0] * (3.0/4.0) + p[1:, 0] * (1.0/4.0)
    p_p[2::2, 0] = p[:-1, 0] * (1.0/4.0) + p[1:, 0] * (3.0/4.0)
    p_p[1:-1:2, -1] = p[:-1, -1] * (3.0/4.0) + p[1:, -1] * (1.0/4.0)
    p_p[2::2, -1] = p[:-1, -1] * (1.0/4.0) + p[1:, -1] * (3.0/4.0)
    p_p[0, 0] = p[0, 0]
    p_p[0, -1] = p[0, -1]
    p_p[-1, 0] = p[-1, 0]
    p_p[-1, -1] = p[-1, -1]
    return p_p
